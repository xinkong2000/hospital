{"remainingRequest":"/Users/xinkong2000/work/vue/hospital/node_modules/babel-loader/lib/index.js!/Users/xinkong2000/work/vue/hospital/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/xinkong2000/work/vue/hospital/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xinkong2000/work/vue/hospital/src/components/ed.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xinkong2000/work/vue/hospital/src/components/ed.vue","mtime":1567328427746},{"path":"/Users/xinkong2000/work/vue/hospital/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xinkong2000/work/vue/hospital/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/xinkong2000/work/vue/hospital/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xinkong2000/work/vue/hospital/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es7.object.values\";\nimport \"core-js/modules/es6.regexp.to-string\";\n//\n//\n//\n//\n//\n//\nimport E from 'wangeditor';\nexport default {\n  name: 'editorElem',\n  data: function data() {\n    return {\n      editor: null,\n      editorContent: ''\n    };\n  },\n  props: ['catchData', 'content'],\n  // 接收父组件的方法\n  watch: {\n    content: function content() {\n      this.editor.txt.html(this.content);\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.editor = new E(this.$refs.editorElem);\n\n    this.editor.customConfig.onchange = function (html) {\n      _this.editorContent = html;\n\n      _this.catchData(_this.editorContent); // 把这个html通过catchData的方法传入父组件\n\n    };\n\n    this.editor.customConfig.uploadImgServer = '你的上传图片的接口';\n    this.editor.customConfig.uploadFileName = '你自定义的文件名';\n    this.editor.customConfig.menus = [// 菜单配置\n    'head', // 标题\n    'bold', // 粗体\n    'fontSize', // 字号\n    'fontName', // 字体\n    'italic', // 斜体\n    'underline', // 下划线\n    'strikeThrough', // 删除线\n    'foreColor', // 文字颜色\n    'backColor', // 背景颜色\n    'link', // 插入链接\n    'list', // 列表\n    'justify', // 对齐方式\n    'quote', // 引用\n    'emoticon', // 表情\n    'image', // 插入图片\n    'table', // 表格\n    'code', // 插入代码\n    'undo', // 撤销\n    'redo' // 重复\n    ]; // 下面是最重要的的方法\n\n    this.editor.customConfig.uploadImgHooks = {\n      before: function before(xhr, editor, files) {// 图片上传之前触发\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，files 是选择的图片文件\n        // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n        // return {\n        //     prevent: true,\n        //     msg: '放弃上传'\n        // }\n      },\n      success: function success(xhr, editor, result) {\n        // 图片上传并返回结果，图片插入成功之后触发\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\n        this.imgUrl = Object.values(result.data).toString();\n      },\n      fail: function fail(xhr, editor, result) {// 图片上传并返回结果，但图片插入错误时触发\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\n      },\n      error: function error(xhr, editor) {// 图片上传出错时触发\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\n      },\n      timeout: function timeout(xhr, editor) {// 图片上传超时时触发\n        // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\n      },\n      // 如果服务器端返回的不是 {errno:0, data: [...]} 这种格式，可使用该配置\n      // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）\n      customInsert: function customInsert(insertImg, result, editor) {\n        // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）\n        // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果\n        // 举例：假如上传图片成功后，服务器端返回的是 {url:'....'} 这种格式，即可这样插入图片：\n        var url = Object.values(result.data); // result.data就是服务器返回的图片名字和链接\n\n        JSON.stringify(url); // 在这里转成JSON格式\n\n        insertImg(url); // result 必须是一个 JSON 格式字符串！！！否则报错\n      }\n    };\n    this.editor.create(); // 创建富文本实例\n\n    if (!this.content) {\n      this.editor.txt.html('<span><p>请编辑内容1</p></span>');\n    }\n  }\n};",{"version":3,"sources":["ed.vue"],"names":[],"mappings":";;;;;;;;;AAOA,OAAA,CAAA,MAAA,YAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,YADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,MAAA,EAAA,IADA;AAEA,MAAA,aAAA,EAAA;AAFA,KAAA;AAIA,GAPA;AAQA,EAAA,KAAA,EAAA,CAAA,WAAA,EAAA,SAAA,CARA;AAQA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,OADA,qBACA;AACA,WAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,KAAA,OAAA;AACA;AAHA,GATA;AAcA,EAAA,OAdA,qBAcA;AAAA;;AACA,SAAA,MAAA,GAAA,IAAA,CAAA,CAAA,KAAA,KAAA,CAAA,UAAA,CAAA;;AACA,SAAA,MAAA,CAAA,YAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA;AACA,MAAA,KAAA,CAAA,aAAA,GAAA,IAAA;;AACA,MAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,aAAA,EAFA,CAEA;;AACA,KAHA;;AAIA,SAAA,MAAA,CAAA,YAAA,CAAA,eAAA,GAAA,WAAA;AACA,SAAA,MAAA,CAAA,YAAA,CAAA,cAAA,GAAA,UAAA;AACA,SAAA,MAAA,CAAA,YAAA,CAAA,KAAA,GAAA,CAAA;AACA,UADA,EACA;AACA,UAFA,EAEA;AACA,cAHA,EAGA;AACA,cAJA,EAIA;AACA,YALA,EAKA;AACA,eANA,EAMA;AACA,mBAPA,EAOA;AACA,eARA,EAQA;AACA,eATA,EASA;AACA,UAVA,EAUA;AACA,UAXA,EAWA;AACA,aAZA,EAYA;AACA,WAbA,EAaA;AACA,cAdA,EAcA;AACA,WAfA,EAeA;AACA,WAhBA,EAgBA;AACA,UAjBA,EAiBA;AACA,UAlBA,EAkBA;AACA,UAnBA,CAmBA;AAnBA,KAAA,CARA,CA6BA;;AACA,SAAA,MAAA,CAAA,YAAA,CAAA,cAAA,GAAA;AACA,MAAA,MAAA,EAAA,gBAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,CACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,OAVA;AAWA,MAAA,OAAA,EAAA,iBAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA;AACA;AACA;AACA,aAAA,MAAA,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,EAAA,QAAA,EAAA;AACA,OAfA;AAgBA,MAAA,IAAA,EAAA,cAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,CACA;AACA;AACA,OAnBA;AAoBA,MAAA,KAAA,EAAA,eAAA,GAAA,EAAA,MAAA,EAAA,CACA;AACA;AACA,OAvBA;AAwBA,MAAA,OAAA,EAAA,iBAAA,GAAA,EAAA,MAAA,EAAA,CACA;AACA;AACA,OA3BA;AA6BA;AACA;AACA,MAAA,YAAA,EAAA,sBAAA,SAAA,EAAA,MAAA,EAAA,MAAA,EAAA;AACA;AACA;AAEA;AACA,YAAA,GAAA,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA,CALA,CAKA;;AACA,QAAA,IAAA,CAAA,SAAA,CAAA,GAAA,EANA,CAMA;;AACA,QAAA,SAAA,CAAA,GAAA,CAAA,CAPA,CAQA;AACA;AAxCA,KAAA;AA2CA,SAAA,MAAA,CAAA,MAAA,GAzEA,CAyEA;;AACA,QAAA,CAAA,KAAA,OAAA,EAAA;AACA,WAAA,MAAA,CAAA,GAAA,CAAA,IAAA,CAAA,4BAAA;AACA;AACA;AA3FA,CAAA","sourcesContent":["\n<template>\n    <div id=\"wangeditor\">\n        <div ref=\"editorElem\" style=\"text-align:left\"></div>\n    </div>  \n</template>\n<script>\nimport E from 'wangeditor'\nexport default {\n  name: 'editorElem',\n  data () {\n    return {\n      editor: null,\n      editorContent: ''\n    }\n  },\n  props: ['catchData', 'content'],    // 接收父组件的方法\n  watch: {\n    content () {\n      this.editor.txt.html(this.content)\n    }\n  },\n  mounted () {\n    this.editor = new E(this.$refs.editorElem)\n    this.editor.customConfig.onchange = (html) => {\n      this.editorContent = html\n      this.catchData(this.editorContent)  // 把这个html通过catchData的方法传入父组件\n    }\n    this.editor.customConfig.uploadImgServer = '你的上传图片的接口'\n    this.editor.customConfig.uploadFileName = '你自定义的文件名'\n    this.editor.customConfig.menus = [          // 菜单配置\n      'head',  // 标题\n      'bold',  // 粗体\n      'fontSize',  // 字号\n      'fontName',  // 字体\n      'italic',  // 斜体\n      'underline',  // 下划线\n      'strikeThrough',  // 删除线\n      'foreColor',  // 文字颜色\n      'backColor',  // 背景颜色\n      'link',  // 插入链接\n      'list',  // 列表\n      'justify',  // 对齐方式\n      'quote',  // 引用\n      'emoticon',  // 表情\n      'image',  // 插入图片\n      'table',  // 表格\n      'code',  // 插入代码\n      'undo',  // 撤销\n      'redo'  // 重复\n    ]\n                      // 下面是最重要的的方法\n    this.editor.customConfig.uploadImgHooks = {\n      before: function (xhr, editor, files) {\n                  // 图片上传之前触发\n                  // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，files 是选择的图片文件\n\n                  // 如果返回的结果是 {prevent: true, msg: 'xxxx'} 则表示用户放弃上传\n                  // return {\n                  //     prevent: true,\n                  //     msg: '放弃上传'\n                  // }\n      },\n      success: function (xhr, editor, result) {\n                  // 图片上传并返回结果，图片插入成功之后触发\n                  // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\n        this.imgUrl = Object.values(result.data).toString()\n      },\n      fail: function (xhr, editor, result) {\n                  // 图片上传并返回结果，但图片插入错误时触发\n                  // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象，result 是服务器端返回的结果\n      },\n      error: function (xhr, editor) {\n                  // 图片上传出错时触发\n                  // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\n      },\n      timeout: function (xhr, editor) {\n                  // 图片上传超时时触发\n                  // xhr 是 XMLHttpRequst 对象，editor 是编辑器对象\n      },\n\n              // 如果服务器端返回的不是 {errno:0, data: [...]} 这种格式，可使用该配置\n              // （但是，服务器端返回的必须是一个 JSON 格式字符串！！！否则会报错）\n      customInsert: function (insertImg, result, editor) {\n                  // 图片上传并返回结果，自定义插入图片的事件（而不是编辑器自动插入图片！！！）\n                  // insertImg 是插入图片的函数，editor 是编辑器对象，result 是服务器端返回的结果\n\n                  // 举例：假如上传图片成功后，服务器端返回的是 {url:'....'} 这种格式，即可这样插入图片：\n        let url = Object.values(result.data)      // result.data就是服务器返回的图片名字和链接\n        JSON.stringify(url)    // 在这里转成JSON格式\n        insertImg(url)\n                  // result 必须是一个 JSON 格式字符串！！！否则报错\n      }\n    }\n\n    this.editor.create()     // 创建富文本实例\n    if (!this.content) {\n      this.editor.txt.html('<span><p>请编辑内容1</p></span>')\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/components"}]}